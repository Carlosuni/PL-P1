/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, LOG, EXP, SIN, COS, COMMA, DIV, INF;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String		PERCCOMM;
terminal Double		REALNUM, SCIENCNUM;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal Double    double_expr;      // used to store evaluated subexpressions
non terminal Integer    number_expr;      // used to store evaluated subexpressions
non terminal Integer    prod_div_expr;      // used to store evaluated subexpressions
non terminal Integer    uminus_expr;      // used to store evaluated subexpressions
non terminal Double    realnum_expr;      // used to store evaluated subexpressions
non terminal Double    prod_div_double_expr;      // used to store evaluated subexpressions
non terminal Double    uminus_double_expr;      // used to store evaluated subexpressions
non terminal String    inf_expr;      // used to store evaluated subexpressions

/* Precedences */
/* Comentadas previo a conversion a gramatica no ambigua*/
/*precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;*/

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            /* Ej1-a */
            | expr_list PERCCOMM         {:  :}
            | PERCCOMM                  {:  :}
            | expr_list double_expr:e SEMI         {: System.out.println(e); :}
            | double_expr:e SEMI                   {: System.out.println(e); :}
            | expr_list inf_expr:e SEMI         {: System.out.println(e); :}
            | inf_expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  prod_div_expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS prod_div_expr:e2        {: RESULT = e1-e2;        :}
             | prod_div_expr:e       	 {: RESULT = e;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             //%prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | number_expr:e	                     {: RESULT = e;           :}
             ;
             
/* Ej1-b */   
double_expr      ::= double_expr:e1 PLUS  prod_div_expr:e2         {: RESULT = e1+e2;        :}
			 | expr:e1 PLUS  prod_div_expr:e2         {: RESULT = e1+e2;        :}
             | double_expr:e1 MINUS prod_div_expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 MINUS prod_div_expr:e2        {: RESULT = e1- e2;        :}
             | prod_div_double_expr:e       	 {: RESULT = e;        :}            
             | MINUS double_expr:e                 {: RESULT = -e;           :}
             //%prec UMINUS
             | LPAREN double_expr:e RPAREN	         {: RESULT = e;           :}
              /* Ej2-a */
             | LOG LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.log(e));        :} 
             | LOG LPAREN expr:e RPAREN      {: RESULT = new Double(Math.log(e));        :}       
             | EXP LPAREN double_expr:e1 COMMA expr:e2 RPAREN      {: RESULT = new Double(Math.pow(e1,e2));        :} 
             | EXP LPAREN expr:e1 COMMA expr:e2 RPAREN      {: RESULT = new Double(Math.pow(e1,e2));        :}    
             | SIN LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.sin(e));        :} 
             | SIN LPAREN expr:e RPAREN      {: RESULT = new Double(Math.sin(e));        :}    
             | COS LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.cos(e));        :} 
             | COS LPAREN expr:e RPAREN      {: RESULT = new Double(Math.cos(e));        :} 
             ;     

/* Para quitar ambiguedad en la gram√°tica */      
number_expr      ::= NUMBER:n	                     {: RESULT = n;           :}
             ;
uminus_expr      ::= UMINUS MINUS number_expr:e              {: RESULT = -e;           :}
			 | number_expr:e        {: RESULT = e;        :}
             ;
             
prod_div_expr      ::= expr:e1 TIMES uminus_expr:e2        {: RESULT = e1*e2;        :}
             | expr:e1 DIV uminus_expr:e2        {: RESULT = e1/e2;        :}
			 | uminus_expr:e        {: RESULT = e;        :}
			 ;

realnum_expr      ::= REALNUM:n	                     {: RESULT = n;           :}
             | SCIENCNUM:n	                     {: RESULT = n;           :}
             ;
			 
uminus_double_expr      ::= UMINUS MINUS realnum_expr:e              {: RESULT = -e;           :}
			 | realnum_expr:e        {: RESULT = e;        :}
         ;
             
prod_div_double_expr      ::= double_expr:e1 TIMES uminus_double_expr:e2        {: RESULT = e1*e2;        :}
             | double_expr:e1 DIV uminus_double_expr:e2        {: RESULT = e1/e2;        :}
             | expr:e1 TIMES uminus_double_expr:e2        {: RESULT = e1*e2;        :}
             | expr:e1 DIV uminus_double_expr:e2        {: RESULT = e1/e2;        :}
			 | uminus_double_expr:e        {: RESULT = e;        :}
			 ;			 

 /* Ej3-a */   
inf_expr      ::= INF PLUS expr:e1       {: RESULT = "INF";        :}
             | INF PLUS double_expr:e1       {: RESULT = "INF";        :}
             | expr:e1 PLUS INF       {: RESULT = "INF";        :}
             | double_expr:e1 PLUS INF       {: RESULT = "INF";        :}
             
             | MINUS INF PLUS expr:e1       {: RESULT = "-INF";        :}
             | MINUS INF PLUS double_expr:e1       {: RESULT = "-INF";        :}
             | MINUS INF       {: RESULT = "-INF";        :}
                  
             | INF MINUS expr:e1       {: RESULT = "INF";        :}
             | INF MINUS double_expr:e1       {: RESULT = "INF";        :}
             | expr:e1 MINUS INF       {: RESULT = "-INF";        :}
             | double_expr:e1 MINUS INF       {: RESULT = "-INF";        :}
             
             | INF TIMES expr:e1       {: RESULT = "INF";        :}
             | INF TIMES double_expr:e1       {: RESULT = "INF";        :}
             | expr:e1 TIMES INF       {: RESULT = "INF";        :}
             | double_expr:e1 TIMES INF       {: RESULT = "INF";        :}
             | INF TIMES MINUS INF       {: RESULT = "INF";        :}
             
             | INF DIV expr:e1       {: RESULT = "INF";        :}
             | INF DIV double_expr:e1       {: RESULT = "INF";        :}
             | expr:e1 DIV INF       {: RESULT = "0";        :}
             | double_expr:e1 DIV INF       {: RESULT = "0";        :}
             | INF DIV MINUS expr:e1       {: RESULT = "-INF";        :}
             | INF DIV MINUS double_expr:e1       {: RESULT = "-INF";        :}
             
             | expr:e1 DIV 0     {: RESULT = "INF";        :}
             | double_expr:e1 DIV 0      {: RESULT = "INF";        :}
             
             | INF MINUS INF     {: RESULT = "UNK";        :}
             | MINUS INF PLUS INF      {: RESULT = "UNK";        :}
             | 0 DIV 0     {: RESULT = "UNK";        :}
             | 0 TIMES INF     {: RESULT = "UNK";        :}
             | INF DIV INF     {: RESULT = "UNK";        :}                
			 ;			 
      
      
             