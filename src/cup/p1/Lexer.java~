/* The following code was generated by JFlex 1.3.5 on 4/2/20, 11:58 PM */

package cup.p1;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;

/* Custom Imports */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/2/20, 11:58 PM from the specification file
 * <tt>file:/home/dumont_dev/work/ws/java/universidad/pl/git/PL-P1/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\22\1\2\1\0\1\22\1\1\16\0\4\0\1\22\1\7"+
    "\2\0\1\0\3\0\1\32\1\34\1\5\1\15\1\0\1\10\1\12"+
    "\1\4\1\17\1\30\2\27\6\3\1\0\1\33\1\6\1\0\1\11"+
    "\1\0\1\25\4\16\1\14\1\16\21\26\1\21\2\26\4\0\1\0"+
    "\1\0\1\42\3\24\1\13\3\24\1\41\2\24\1\43\1\24\1\37"+
    "\1\36\1\31\3\24\1\40\3\24\1\20\2\24\1\35\1\0\1\44"+
    "\1\0\41\0\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0"+
    "\4\0\1\0\5\0\1\0\1\23\7\0\1\23\3\0\1\23\3\0"+
    "\1\23\1\0\1\23\3\0\1\0\2\0\1\23\6\0\1\24\7\0"+
    "\1\24\3\0\1\24\3\0\1\24\1\0\1\24\3\0\1\0\2\0"+
    "\1\24\u01c7\0\4\0\14\0\16\0\5\0\7\0\1\0\1\0\1\0"+
    "\21\0\160\0\5\0\1\0\2\0\2\0\4\0\1\0\1\0\6\0"+
    "\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0\123\0\1\0"+
    "\213\0\1\0\5\0\2\0\246\0\1\0\46\0\2\0\1\0\7\0"+
    "\47\0\7\0\1\0\1\0\55\0\1\0\1\0\1\0\2\0\1\0"+
    "\2\0\1\0\1\0\10\0\33\0\5\0\3\0\15\0\6\0\5\0"+
    "\1\0\4\0\13\0\1\0\1\0\3\0\53\0\37\0\4\0\2\0"+
    "\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0\2\0\1\0"+
    "\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0\1\0\1\0"+
    "\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0\41\0\11\0"+
    "\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0\1\0\3\0"+
    "\1\0\5\0\22\0\31\0\3\0\4\0\13\0\65\0\25\0\1\0"+
    "\10\0\26\0\60\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0"+
    "\2\0\2\0\12\0\1\0\20\0\3\0\1\0\10\0\2\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\1\0\3\0\4\0\2\0\1\0"+
    "\1\0\7\0\2\0\2\0\2\0\3\0\1\0\10\0\1\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\4\0\7\0\2\0\4\0"+
    "\3\0\1\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0"+
    "\2\0\2\0\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0"+
    "\14\0\3\0\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0"+
    "\10\0\1\0\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0"+
    "\2\0\12\0\1\0\1\0\7\0\1\0\6\0\1\0\3\0\1\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\5\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0\10\0"+
    "\2\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0"+
    "\20\0\1\0\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0"+
    "\2\0\1\0\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0"+
    "\14\0\4\0\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0"+
    "\1\0\16\0\12\0\11\0\1\0\6\0\4\0\1\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\20\0\3\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\1\0\3\0\5\0\2\0\2\0\2\0"+
    "\12\0\20\0\1\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\12\0\1\0\5\0\2\0\1\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\7\0\1\0\1\0\2\0\2\0\2\0"+
    "\12\0\1\0\2\0\15\0\4\0\1\0\10\0\1\0\3\0\1\0"+
    "\51\0\2\0\1\0\7\0\1\0\3\0\1\0\4\0\1\0\5\0"+
    "\3\0\1\0\7\0\3\0\2\0\2\0\12\0\12\0\6\0\2\0"+
    "\2\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0\10\0\6\0"+
    "\12\0\2\0\2\0\15\0\60\0\1\0\2\0\7\0\4\0\10\0"+
    "\10\0\1\0\12\0\47\0\2\0\1\0\1\0\2\0\2\0\1\0"+
    "\1\0\2\0\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0"+
    "\1\0\1\0\1\0\2\0\2\0\1\0\4\0\1\0\2\0\6\0"+
    "\1\0\2\0\1\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0"+
    "\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0\12\0\13\0"+
    "\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0\1\0\44\0"+
    "\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0\11\0\1\0"+
    "\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0\4\0\3\0"+
    "\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0\17\0"+
    "\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0"+
    "\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0"+
    "\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0"+
    "\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0"+
    "\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0\3\0\u026c\0"+
    "\2\0\21\0\1\0\32\0\5\0\113\0\3\0\13\0\7\0\15\0"+
    "\1\0\4\0\3\0\13\0\22\0\3\0\13\0\22\0\2\0\14\0"+
    "\15\0\1\0\3\0\1\0\2\0\14\0\64\0\40\0\3\0\1\0"+
    "\3\0\2\0\1\0\2\0\12\0\41\0\4\0\1\0\12\0\6\0"+
    "\130\0\10\0\5\0\2\0\42\0\1\0\1\0\5\0\106\0\12\0"+
    "\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0\2\0\5\0"+
    "\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0\5\0\4\0"+
    "\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0\1\0"+
    "\10\0\16\0\102\0\5\0\57\0\21\0\7\0\4\0\12\0\21\0"+
    "\11\0\14\0\3\0\36\0\15\0\2\0\12\0\54\0\16\0\14\0"+
    "\44\0\24\0\10\0\12\0\3\0\3\0\12\0\44\0\2\0\11\0"+
    "\107\0\3\0\1\0\25\0\4\0\1\0\4\0\3\0\2\0\3\0"+
    "\6\0\300\0\72\0\1\0\5\0\u0116\0\2\0\6\0\2\0\46\0"+
    "\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0"+
    "\1\0\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0"+
    "\1\0\7\0\16\0\5\0\32\0\5\0\20\0\2\0\23\0\1\0"+
    "\13\0\5\0\1\0\12\0\1\0\1\0\15\0\1\0\20\0\15\0"+
    "\3\0\40\0\20\0\15\0\4\0\1\0\3\0\14\0\21\0\1\0"+
    "\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0"+
    "\5\0\5\0\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0\57\0"+
    "\1\0\205\0\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0"+
    "\5\0\1\0\2\0\70\0\7\0\1\0\17\0\1\0\27\0\11\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0"+
    "\3\0\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0"+
    "\2\0\2\0\2\0\3\0\1\0\132\0\1\0\4\0\5\0\52\0"+
    "\2\0\136\0\21\0\33\0\65\0\20\0\u0200\0\u19b6\0\112\0\u51eb\0"+
    "\25\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0"+
    "\24\0\57\0\1\0\4\0\12\0\1\0\37\0\2\0\120\0\2\0"+
    "\45\0\11\0\2\0\147\0\2\0\44\0\1\0\10\0\77\0\13\0"+
    "\1\0\3\0\1\0\4\0\1\0\27\0\5\0\20\0\1\0\7\0"+
    "\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0\6\0"+
    "\3\0\1\0\1\0\1\0\2\0\12\0\34\0\10\0\2\0\27\0"+
    "\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0"+
    "\6\0\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0"+
    "\3\0\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0"+
    "\3\0\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0"+
    "\1\0\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0"+
    "\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0"+
    "\1\0\53\0\1\0\12\0\12\0\163\0\10\0\1\0\2\0\2\0"+
    "\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0"+
    "\152\0\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0"+
    "\15\0\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0"+
    "\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0"+
    "\20\0\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0"+
    "\5\0\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0"+
    "\32\0\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0"+
    "\6\0\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0"+
    "\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    37,    74,   111,   148,   185,   222,    74,   259,    74, 
      296,    74,   333,    74,   370,   407,    74,    74,    74,   444, 
      148,    74,   481,   518,   555,   592,   629,   666,   703,   740, 
      777,   814,   851,   888,   925,   962,   999,  1036,  1073,  1110, 
     1147,  1184,  1221,  1221,  1258,   148,  1295,  1332,  1369,  1406, 
     1443,  1480,  1517,   962,  1554,  1591,  1628,  1665,  1702,  1739, 
     1776,    74,  1813,  1850,  1887,  1924,  1961,  1998,  1591,  2035, 
     2072,  2109,  2146,  2183,  2220,  2257,  1036,  2294,  2331,  2368, 
     2405,  2442,  2479,  2516,  2553,  2590,  2220,  2627,  2257,  2664, 
     2701,  2738,  2775,  2812,    74,  2849,  2886,  2923,  2960,  1591, 
     2997,  1887,  3034,  3071,  2146,  3108,  3145,  3182,   629,    74, 
       74,  2294,  3034,  3219,  2775,  3256,  3293,  3330,  3367,  3034, 
     3404,  3441,  3478,  3515,    74
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\3\3\1\13\1\14\1\13\1\15\1\3\1\13"+
    "\1\16\1\17\2\3\1\13\2\20\1\3\1\21\1\22"+
    "\1\23\1\24\7\3\45\25\2\26\1\0\22\26\1\27"+
    "\21\26\1\5\22\26\1\27\17\26\45\0\2\26\1\0"+
    "\1\30\1\31\5\26\1\32\2\33\2\26\1\30\5\26"+
    "\1\27\1\26\2\30\16\26\1\0\1\26\1\34\1\35"+
    "\17\26\1\27\21\26\1\0\4\26\1\36\15\26\1\27"+
    "\21\26\1\0\1\37\4\26\1\40\2\26\1\17\1\41"+
    "\1\26\1\41\1\37\1\17\1\41\1\42\2\17\1\27"+
    "\1\41\2\37\1\17\4\26\6\17\3\26\1\0\1\43"+
    "\1\31\5\26\1\32\2\33\2\26\1\43\2\44\3\26"+
    "\1\27\1\26\2\43\16\26\1\0\10\26\2\17\1\26"+
    "\1\17\1\26\2\17\1\42\2\17\1\27\1\17\2\26"+
    "\1\17\4\26\6\17\3\26\1\0\1\43\1\31\5\26"+
    "\1\32\2\33\2\26\1\43\5\26\1\27\1\26\2\43"+
    "\16\26\1\0\11\26\1\45\10\26\1\27\17\26\2\46"+
    "\1\0\42\46\2\26\1\0\1\47\6\26\1\32\2\33"+
    "\2\26\1\47\5\26\1\27\1\26\2\47\16\26\1\0"+
    "\1\50\13\26\1\51\5\26\1\27\1\26\1\50\1\51"+
    "\16\26\1\0\1\52\13\26\1\52\5\26\1\27\1\26"+
    "\2\52\16\26\1\0\1\53\4\26\1\54\4\26\1\54"+
    "\1\26\1\53\5\26\1\27\1\26\2\53\14\26\1\34"+
    "\1\55\1\56\22\34\1\57\17\34\2\35\1\60\2\35"+
    "\1\61\17\35\1\62\17\35\2\26\1\0\5\26\1\63"+
    "\14\26\1\27\21\26\1\0\1\64\13\26\1\64\5\26"+
    "\1\27\1\26\2\64\16\26\1\0\1\65\13\26\1\65"+
    "\5\26\1\27\1\26\2\65\16\26\1\0\1\37\4\26"+
    "\1\40\2\26\2\17\1\26\1\17\1\37\2\17\1\42"+
    "\2\17\1\27\1\17\2\37\1\17\4\26\6\17\3\26"+
    "\1\0\11\26\1\17\1\26\1\17\2\26\1\17\1\42"+
    "\1\17\1\26\1\27\1\17\20\26\1\0\1\47\1\31"+
    "\5\26\1\32\2\33\2\26\1\47\5\26\1\27\1\26"+
    "\2\47\16\26\1\0\1\66\10\26\1\66\1\26\2\66"+
    "\5\26\1\27\1\26\2\66\16\26\1\0\15\26\1\67"+
    "\4\26\1\27\17\26\2\46\1\0\7\46\1\70\32\46"+
    "\2\26\1\0\1\71\6\26\1\32\2\33\2\26\1\71"+
    "\5\26\1\27\1\26\2\71\16\26\1\0\1\26\1\72"+
    "\20\26\1\27\21\26\1\0\1\50\1\72\12\26\1\50"+
    "\5\26\1\27\1\26\2\50\16\26\1\0\1\52\7\26"+
    "\2\33\2\26\1\52\5\26\1\27\1\26\2\52\16\26"+
    "\1\0\1\53\13\26\1\53\5\26\1\27\1\26\2\53"+
    "\16\26\1\56\22\26\1\27\17\26\1\73\1\74\1\56"+
    "\42\73\5\60\1\75\37\60\2\35\1\60\1\35\1\76"+
    "\1\61\17\35\1\62\17\35\2\77\1\60\2\77\1\100"+
    "\37\77\2\26\1\0\5\26\1\101\14\26\1\27\21\26"+
    "\1\0\1\102\13\26\1\102\5\26\1\27\1\26\2\102"+
    "\16\26\1\0\1\103\13\26\1\103\5\26\1\27\1\26"+
    "\2\103\16\26\1\0\22\26\1\27\3\26\1\104\13\26"+
    "\2\105\1\0\42\105\2\26\1\0\1\106\4\26\1\107"+
    "\1\26\1\32\1\33\1\110\1\26\1\111\1\106\1\26"+
    "\1\111\3\26\1\27\1\111\2\106\16\26\1\0\1\112"+
    "\13\26\1\112\5\26\1\27\1\26\2\112\14\26\1\73"+
    "\1\74\1\56\7\73\1\113\32\73\2\46\1\56\7\46"+
    "\1\70\32\46\4\60\1\56\1\75\37\60\2\77\1\60"+
    "\2\77\1\100\4\77\1\114\34\77\1\60\1\77\1\115"+
    "\1\100\4\77\1\114\32\77\2\101\1\116\5\101\1\117"+
    "\14\101\1\120\17\101\2\26\1\0\1\121\13\26\1\121"+
    "\5\26\1\27\1\26\2\121\16\26\1\0\1\122\13\26"+
    "\1\122\5\26\1\27\1\26\2\122\16\26\1\0\22\26"+
    "\1\27\10\26\1\123\10\26\1\0\1\124\6\26\1\32"+
    "\2\33\2\26\1\124\5\26\1\27\1\26\2\124\16\26"+
    "\1\0\11\26\1\111\1\26\1\111\2\26\1\111\3\26"+
    "\1\27\1\111\20\26\1\0\1\53\4\26\1\54\3\26"+
    "\1\125\1\54\1\125\1\53\1\26\1\125\3\26\1\27"+
    "\1\125\2\53\16\26\1\0\11\26\1\125\1\26\1\125"+
    "\2\26\1\125\3\26\1\27\1\125\20\26\1\0\1\126"+
    "\13\26\1\126\5\26\1\27\1\26\2\126\14\26\1\127"+
    "\1\130\1\56\42\127\2\131\1\60\2\131\1\132\37\131"+
    "\10\116\1\133\34\116\2\101\1\116\5\101\1\134\14\101"+
    "\1\120\17\101\2\135\1\116\5\135\1\136\34\135\2\26"+
    "\1\0\1\137\10\26\1\125\1\26\1\125\1\137\1\26"+
    "\1\125\3\26\1\27\1\125\2\137\16\26\1\0\1\140"+
    "\13\26\1\140\5\26\1\27\1\26\2\140\16\26\1\0"+
    "\22\26\1\27\11\26\1\141\7\26\1\0\1\142\6\26"+
    "\1\32\2\33\2\26\1\142\5\26\1\27\1\26\2\142"+
    "\16\26\1\0\11\26\1\137\1\26\1\137\2\26\1\137"+
    "\3\26\1\27\1\137\20\26\1\0\1\143\13\26\1\143"+
    "\5\26\1\27\1\26\2\143\14\26\2\105\1\56\42\105"+
    "\2\131\1\60\1\131\1\144\1\132\37\131\10\116\1\145"+
    "\34\116\2\101\1\116\5\101\1\134\1\146\13\101\1\120"+
    "\17\101\2\135\1\116\5\135\1\136\1\135\1\147\34\135"+
    "\1\116\5\135\1\150\1\135\1\147\32\135\2\26\1\0"+
    "\1\137\4\26\1\151\6\26\1\137\5\26\1\27\1\26"+
    "\2\137\16\26\1\0\10\26\1\152\11\26\1\27\21\26"+
    "\1\0\1\153\4\26\1\154\1\26\1\32\1\33\1\155"+
    "\1\26\1\156\1\153\1\26\1\156\3\26\1\27\1\156"+
    "\2\153\16\26\1\0\1\157\13\26\1\157\5\26\1\27"+
    "\1\26\2\157\14\26\10\116\1\145\1\160\33\116\2\161"+
    "\1\116\5\161\1\162\34\161\2\135\1\116\5\135\1\150"+
    "\1\163\1\147\32\135\2\26\1\0\22\26\1\27\11\26"+
    "\1\164\7\26\1\0\1\165\4\26\1\154\1\26\1\32"+
    "\1\33\1\155\1\26\1\156\1\165\1\26\1\156\3\26"+
    "\1\27\1\156\2\165\16\26\1\0\11\26\1\156\1\26"+
    "\1\156\2\26\1\156\3\26\1\27\1\156\16\26\2\161"+
    "\1\116\5\161\1\166\34\161\2\26\1\0\22\26\1\27"+
    "\12\26\1\167\6\26\1\0\1\165\6\26\1\32\2\33"+
    "\2\26\1\165\5\26\1\27\1\26\2\165\14\26\2\161"+
    "\1\116\5\161\1\166\1\170\33\161\2\26\1\0\22\26"+
    "\1\27\13\26\1\171\5\26\1\0\22\26\1\27\14\26"+
    "\1\172\4\26\1\0\22\26\1\27\15\26\1\173\3\26"+
    "\1\0\22\26\1\27\16\26\1\174\2\26\1\0\22\26"+
    "\1\27\4\26\1\175\12\26";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  0,  0,  0,  1,  0,  0,  1,  1,  0,  1,  9,  0,  0, 
     0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0, 
     0,  0,  0,  0,  1,  1,  0,  1,  1,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  0,  1,  1,  0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0, 
     0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  0,  1,  0,  0,  0,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3552];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 53: 
          {  return symbolFactory.newSymbol("HEXNUMBER", HEXNUMBER, Integer.parseInt(yytext().substring(2,yytext().length()), 16));  }
        case 126: break;
        case 11: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 127: break;
        case 17: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 128: break;
        case 6: 
          {  return symbolFactory.newSymbol("DIVIDEDBY", DIVIDEDBY);  }
        case 129: break;
        case 41: 
        case 42: 
          {  return symbolFactory.newSymbol("DOUBLENUMBER", DOUBLENUMBER, Double.parseDouble(yytext()));  }
        case 130: break;
        case 44: 
        case 45: 
        case 59: 
        case 61: 
        case 76: 
        case 87: 
        case 99: 
        case 101: 
        case 111: 
        case 114: 
        case 119: 
          {  return symbolFactory.newSymbol("COMMENT", COMMENT, yytext());  }
        case 131: break;
        case 16: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 132: break;
        case 18: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 133: break;
        case 5: 
        case 12: 
        case 15: 
        case 23: 
        case 34: 
        case 38: 
        case 56: 
        case 69: 
        case 83: 
        case 97: 
        case 106: 
        case 116: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 134: break;
        case 124: 
          {  return symbolFactory.newSymbol("EXPONENTIAL", EXPONENTIAL, yytext());  }
        case 135: break;
        case 3: 
        case 4: 
        case 13: 
          {                                }
        case 136: break;
        case 71: 
        case 72: 
        case 84: 
        case 94: 
          {  return symbolFactory.newSymbol("MATRICULA", MATRICULA, yytext());  }
        case 137: break;
        case 9: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 138: break;
        case 7: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 139: break;
        case 2: 
        case 8: 
        case 19: 
        case 20: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 140: break;
        case 10: 
        case 14: 
        case 32: 
        case 33: 
          {  return symbolFactory.newSymbol("NOMBREAPELLIDOS", NOMBREAPELLIDOS, yytext());  }
        case 141: break;
        case 110: 
          {  return symbolFactory.newSymbol("FECHA", FECHA, yytext());  }
        case 142: break;
        case 68: 
        case 86: 
        case 88: 
        case 89: 
        case 112: 
        case 113: 
        case 117: 
          {  return symbolFactory.newSymbol("EMAIL", EMAIL, yytext());  }
        case 143: break;
        case 108: 
        case 109: 
          {  return symbolFactory.newSymbol("DNI", DNI, yytext());  }
        case 144: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
