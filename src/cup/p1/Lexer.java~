/* The following code was generated by JFlex 1.3.5 on 4/15/20, 11:18 PM */

package cup.p1;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;

/* Custom Imports */
import helper.TablaSimbolos;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/15/20, 11:18 PM from the specification file
 * <tt>file:/home/dumont_dev/work/ws/java/universidad/pl/git/PL-P1/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\22\1\2\1\0\1\22\1\1\16\0\4\0\1\22\1\7"+
    "\2\0\1\0\3\0\1\32\1\41\1\5\1\15\1\0\1\10\1\12"+
    "\1\4\1\17\1\30\2\27\6\3\1\0\1\40\1\6\1\36\1\11"+
    "\1\0\1\25\4\16\1\14\1\16\6\26\1\37\12\26\1\21\2\26"+
    "\4\0\1\0\1\0\4\24\1\13\1\24\1\35\4\24\1\33\2\24"+
    "\1\34\1\31\7\24\1\20\2\24\4\0\41\0\2\0\4\0\4\0"+
    "\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\1\0\1\23"+
    "\7\0\1\23\3\0\1\23\3\0\1\23\1\0\1\23\3\0\1\0"+
    "\2\0\1\23\6\0\1\24\7\0\1\24\3\0\1\24\3\0\1\24"+
    "\1\0\1\24\3\0\1\0\2\0\1\24\u01c7\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0"+
    "\2\0\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0"+
    "\1\0\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0"+
    "\1\0\46\0\2\0\1\0\7\0\47\0\7\0\1\0\1\0\55\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0"+
    "\5\0\3\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0"+
    "\3\0\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0"+
    "\1\0\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0"+
    "\1\0\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0"+
    "\1\0\16\0\12\0\41\0\11\0\2\0\4\0\1\0\5\0\26\0"+
    "\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0"+
    "\4\0\13\0\65\0\25\0\1\0\10\0\26\0\60\0\66\0\3\0"+
    "\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0\20\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0"+
    "\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0"+
    "\12\0\4\0\7\0\2\0\4\0\3\0\1\0\6\0\4\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0"+
    "\2\0\1\0\1\0\5\0\4\0\2\0\2\0\3\0\3\0\1\0"+
    "\7\0\4\0\1\0\1\0\7\0\14\0\3\0\1\0\13\0\3\0"+
    "\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\2\0\1\0\1\0\10\0\1\0\3\0\1\0\3\0"+
    "\2\0\1\0\17\0\2\0\2\0\2\0\12\0\1\0\1\0\7\0"+
    "\1\0\6\0\1\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0"+
    "\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\7\0"+
    "\2\0\2\0\2\0\3\0\10\0\2\0\4\0\2\0\1\0\3\0"+
    "\2\0\2\0\12\0\1\0\1\0\20\0\1\0\1\0\1\0\6\0"+
    "\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0"+
    "\3\0\2\0\3\0\3\0\3\0\14\0\4\0\5\0\3\0\3\0"+
    "\1\0\4\0\2\0\1\0\6\0\1\0\16\0\12\0\11\0\1\0"+
    "\6\0\4\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0"+
    "\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\1\0"+
    "\3\0\5\0\2\0\2\0\2\0\12\0\20\0\1\0\3\0\1\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\7\0"+
    "\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0\15\0\4\0"+
    "\1\0\10\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0"+
    "\3\0\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0\2\0"+
    "\2\0\12\0\12\0\6\0\2\0\2\0\1\0\22\0\3\0\30\0"+
    "\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0"+
    "\1\0\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0\60\0"+
    "\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0"+
    "\1\0\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0"+
    "\1\0\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0"+
    "\1\0\4\0\1\0\2\0\6\0\1\0\2\0\1\0\2\0\5\0"+
    "\1\0\1\0\1\0\6\0\2\0\12\0\2\0\4\0\40\0\1\0"+
    "\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0"+
    "\4\0\2\0\10\0\1\0\44\0\4\0\24\0\1\0\2\0\5\0"+
    "\13\0\1\0\44\0\11\0\1\0\71\0\53\0\24\0\1\0\12\0"+
    "\6\0\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0\3\0"+
    "\4\0\15\0\14\0\1\0\17\0\2\0\46\0\1\0\1\0\5\0"+
    "\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0\1\0"+
    "\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0\1\0"+
    "\71\0\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0\20\0"+
    "\126\0\2\0\6\0\3\0\u026c\0\2\0\21\0\1\0\32\0\5\0"+
    "\113\0\3\0\13\0\7\0\15\0\1\0\4\0\3\0\13\0\22\0"+
    "\3\0\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0"+
    "\14\0\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0\12\0"+
    "\41\0\4\0\1\0\12\0\6\0\130\0\10\0\5\0\2\0\42\0"+
    "\1\0\1\0\5\0\106\0\12\0\37\0\1\0\14\0\4\0\14\0"+
    "\12\0\12\0\36\0\2\0\5\0\13\0\54\0\4\0\32\0\6\0"+
    "\12\0\46\0\27\0\5\0\4\0\65\0\12\0\1\0\35\0\2\0"+
    "\13\0\6\0\12\0\15\0\1\0\10\0\16\0\102\0\5\0\57\0"+
    "\21\0\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0"+
    "\2\0\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0"+
    "\3\0\12\0\44\0\2\0\11\0\107\0\3\0\1\0\25\0\4\0"+
    "\1\0\4\0\3\0\2\0\3\0\6\0\300\0\72\0\1\0\5\0"+
    "\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0"+
    "\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0"+
    "\6\0\4\0\15\0\5\0\3\0\1\0\7\0\16\0\5\0\32\0"+
    "\5\0\20\0\2\0\23\0\1\0\13\0\5\0\1\0\12\0\1\0"+
    "\1\0\15\0\1\0\20\0\15\0\3\0\40\0\20\0\15\0\4\0"+
    "\1\0\3\0\14\0\21\0\1\0\4\0\1\0\2\0\12\0\1\0"+
    "\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0\21\0"+
    "\51\0\u0a77\0\57\0\1\0\57\0\1\0\205\0\6\0\4\0\3\0"+
    "\2\0\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0"+
    "\1\0\17\0\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\40\0\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0\1\0"+
    "\5\0\2\0\5\0\4\0\126\0\2\0\2\0\2\0\3\0\1\0"+
    "\132\0\1\0\4\0\5\0\52\0\2\0\136\0\21\0\33\0\65\0"+
    "\20\0\u0200\0\u19b6\0\112\0\u51eb\0\25\0\u048d\0\103\0\56\0\2\0"+
    "\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0\1\0\4\0\12\0"+
    "\1\0\37\0\2\0\120\0\2\0\45\0\11\0\2\0\147\0\2\0"+
    "\44\0\1\0\10\0\77\0\13\0\1\0\3\0\1\0\4\0\1\0"+
    "\27\0\5\0\20\0\1\0\7\0\64\0\14\0\2\0\62\0\22\0"+
    "\12\0\12\0\6\0\22\0\6\0\3\0\1\0\1\0\1\0\2\0"+
    "\12\0\34\0\10\0\2\0\27\0\15\0\14\0\35\0\3\0\4\0"+
    "\57\0\16\0\16\0\1\0\12\0\6\0\5\0\1\0\12\0\12\0"+
    "\5\0\1\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0\2\0"+
    "\12\0\6\0\27\0\3\0\1\0\3\0\62\0\1\0\1\0\3\0"+
    "\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0\2\0"+
    "\13\0\5\0\2\0\3\0\2\0\12\0\6\0\2\0\6\0\2\0"+
    "\6\0\11\0\7\0\1\0\7\0\1\0\53\0\1\0\12\0\12\0"+
    "\163\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0"+
    "\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0"+
    "\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0"+
    "\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0"+
    "\2\0\66\0\50\0\15\0\3\0\20\0\20\0\20\0\3\0\2\0"+
    "\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0\1\0"+
    "\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0"+
    "\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0"+
    "\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    34,    68,   102,   136,   170,   204,    68,   238,    68, 
      272,   306,    68,   340,   374,   408,   442,    68,   476,   510, 
      544,    68,    68,   136,    68,   578,   612,   646,   680,   714, 
      748,   782,   816,   850,   884,   918,   952,   986,  1020,  1054, 
      374,  1088,  1122,  1156,  1190,  1224,  1258,  1292,  1326,  1326, 
     1360,   136,  1394,  1428,  1462,  1496,  1530,  1564,  1598,  1632, 
      408,  1666,  1054,  1700,  1734,  1768,  1802,  1836,  1870,  1904, 
     1938,    68,  1972,  2006,  2040,    68,  2074,  2108,    68,  1734, 
     1768,  2142,  2176,  2210,  2244,  2278,  2312,  2346,  1156,  2380, 
     2414,  2448,  2482,  2516,  2550,  2584,  2618,  2312,  2652,  2346, 
     2686,  2720,  2754,  2788,  2822,    68,  2856,  2890,  2924,  1768, 
     2958,  2040,  2992,  3026,  2244,  3060,  3094,   714,    68,    68, 
     2380,  2992,  3128,  2788,  3162,  3196,  2992
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\2\3\1\13\1\14\1\15\1\14\1\16\1\3"+
    "\1\14\1\17\1\20\2\3\1\14\2\21\1\3\1\22"+
    "\1\23\2\3\1\24\1\25\1\26\1\27\42\30\2\31"+
    "\1\0\22\31\1\32\16\31\1\5\22\31\1\32\14\31"+
    "\42\0\2\31\1\0\1\33\1\34\5\31\1\35\2\36"+
    "\2\31\1\33\5\31\1\32\1\31\2\33\13\31\1\0"+
    "\1\31\1\37\1\40\17\31\1\32\16\31\1\0\4\31"+
    "\1\41\15\31\1\32\16\31\1\0\15\31\1\42\4\31"+
    "\1\32\16\31\1\0\1\43\4\31\1\44\2\31\1\45"+
    "\1\46\1\31\1\46\1\43\1\45\1\46\2\31\1\45"+
    "\1\32\1\46\2\43\1\45\1\31\3\45\1\31\1\46"+
    "\4\31\1\0\1\47\1\34\5\31\1\35\2\36\2\31"+
    "\1\47\2\50\3\31\1\32\1\31\2\47\13\31\1\0"+
    "\17\31\1\51\2\31\1\32\10\31\1\24\5\31\1\0"+
    "\10\31\1\45\4\31\1\45\3\31\1\45\1\32\3\31"+
    "\1\45\1\31\3\45\6\31\1\0\1\47\1\34\5\31"+
    "\1\35\2\36\2\31\1\47\5\31\1\32\1\31\2\47"+
    "\13\31\1\0\22\31\1\32\6\31\1\52\7\31\1\0"+
    "\17\31\1\24\2\31\1\32\16\31\1\0\1\43\4\31"+
    "\1\44\2\31\1\45\1\53\1\31\1\46\1\43\1\45"+
    "\1\46\2\31\1\45\1\32\1\46\2\43\1\45\1\31"+
    "\3\45\1\31\1\46\2\31\2\54\1\0\37\54\2\31"+
    "\1\0\1\55\6\31\1\35\2\36\2\31\1\55\5\31"+
    "\1\32\1\31\2\55\13\31\1\0\1\56\13\31\1\57"+
    "\5\31\1\32\1\31\1\56\1\57\13\31\1\0\1\60"+
    "\13\31\1\60\5\31\1\32\1\31\2\60\13\31\1\0"+
    "\1\61\4\31\1\62\4\31\1\62\1\31\1\61\5\31"+
    "\1\32\1\31\2\61\11\31\1\37\1\63\1\64\22\37"+
    "\1\65\14\37\2\40\1\66\2\40\1\67\17\40\1\70"+
    "\14\40\2\31\1\0\5\31\1\71\14\31\1\32\16\31"+
    "\1\0\22\31\1\32\3\31\1\72\12\31\1\0\1\73"+
    "\13\31\1\73\5\31\1\32\1\31\2\73\13\31\1\0"+
    "\1\74\13\31\1\74\5\31\1\32\1\31\2\74\13\31"+
    "\1\0\10\31\1\45\1\75\1\31\1\75\1\31\1\45"+
    "\1\75\1\76\1\75\1\45\1\32\1\75\2\31\1\45"+
    "\1\31\3\45\1\31\1\75\4\31\1\0\1\43\4\31"+
    "\1\44\6\31\1\43\5\31\1\32\1\31\2\43\13\31"+
    "\1\0\1\55\1\34\5\31\1\35\2\36\2\31\1\55"+
    "\5\31\1\32\1\31\2\55\13\31\1\0\1\77\10\31"+
    "\1\77\1\31\2\77\5\31\1\32\1\31\2\77\13\31"+
    "\1\0\22\31\1\32\7\31\1\100\6\31\1\0\1\43"+
    "\4\31\1\44\6\31\1\43\5\31\1\32\1\31\2\43"+
    "\6\31\1\101\2\31\2\54\1\0\7\54\1\102\27\54"+
    "\2\31\1\0\1\103\6\31\1\35\2\36\2\31\1\103"+
    "\5\31\1\32\1\31\2\103\13\31\1\0\1\31\1\104"+
    "\20\31\1\32\16\31\1\0\1\56\1\104\12\31\1\56"+
    "\5\31\1\32\1\31\2\56\13\31\1\0\1\60\7\31"+
    "\2\36\2\31\1\60\5\31\1\32\1\31\2\60\13\31"+
    "\1\0\1\61\13\31\1\61\5\31\1\32\1\31\2\61"+
    "\13\31\1\64\22\31\1\32\14\31\1\105\1\106\1\64"+
    "\37\105\5\66\1\107\34\66\2\40\1\66\1\40\1\110"+
    "\1\67\17\40\1\70\14\40\2\111\1\66\2\111\1\112"+
    "\34\111\2\31\1\0\5\31\1\113\14\31\1\32\16\31"+
    "\1\0\22\31\1\32\4\31\1\114\11\31\1\0\1\115"+
    "\13\31\1\115\5\31\1\32\1\31\2\115\13\31\1\0"+
    "\1\116\13\31\1\116\5\31\1\32\1\31\2\116\13\31"+
    "\1\0\11\31\1\75\1\31\1\75\2\31\1\75\1\76"+
    "\1\75\1\31\1\32\1\75\10\31\1\75\4\31\1\0"+
    "\22\31\1\32\4\31\1\117\11\31\1\0\1\120\13\31"+
    "\1\120\5\31\1\32\1\31\2\120\11\31\2\121\1\0"+
    "\37\121\2\31\1\0\1\122\4\31\1\123\1\31\1\35"+
    "\1\36\1\124\1\31\1\125\1\122\1\31\1\125\3\31"+
    "\1\32\1\125\2\122\6\31\1\125\4\31\1\0\1\126"+
    "\13\31\1\126\5\31\1\32\1\31\2\126\11\31\1\105"+
    "\1\106\1\64\7\105\1\127\27\105\2\54\1\64\7\54"+
    "\1\102\27\54\4\66\1\64\1\107\34\66\2\111\1\66"+
    "\2\111\1\112\4\111\1\130\31\111\1\66\1\111\1\131"+
    "\1\112\4\111\1\130\27\111\2\113\1\132\5\113\1\133"+
    "\14\113\1\134\14\113\2\31\1\0\1\135\13\31\1\135"+
    "\5\31\1\32\1\31\2\135\13\31\1\0\1\136\13\31"+
    "\1\136\5\31\1\32\1\31\2\136\13\31\1\0\1\137"+
    "\6\31\1\35\2\36\2\31\1\137\5\31\1\32\1\31"+
    "\2\137\13\31\1\0\11\31\1\125\1\31\1\125\2\31"+
    "\1\125\3\31\1\32\1\125\10\31\1\125\4\31\1\0"+
    "\1\61\4\31\1\62\3\31\1\140\1\62\1\140\1\61"+
    "\1\31\1\140\3\31\1\32\1\140\2\61\6\31\1\140"+
    "\4\31\1\0\11\31\1\140\1\31\1\140\2\31\1\140"+
    "\3\31\1\32\1\140\10\31\1\140\4\31\1\0\1\141"+
    "\13\31\1\141\5\31\1\32\1\31\2\141\11\31\1\142"+
    "\1\143\1\64\37\142\2\144\1\66\2\144\1\145\34\144"+
    "\10\132\1\146\31\132\2\113\1\132\5\113\1\147\14\113"+
    "\1\134\14\113\2\150\1\132\5\150\1\151\31\150\2\31"+
    "\1\0\1\152\10\31\1\140\1\31\1\140\1\152\1\31"+
    "\1\140\3\31\1\32\1\140\2\152\6\31\1\140\4\31"+
    "\1\0\1\153\13\31\1\153\5\31\1\32\1\31\2\153"+
    "\13\31\1\0\1\154\6\31\1\35\2\36\2\31\1\154"+
    "\5\31\1\32\1\31\2\154\13\31\1\0\11\31\1\152"+
    "\1\31\1\152\2\31\1\152\3\31\1\32\1\152\10\31"+
    "\1\152\4\31\1\0\1\155\13\31\1\155\5\31\1\32"+
    "\1\31\2\155\11\31\2\121\1\64\37\121\2\144\1\66"+
    "\1\144\1\156\1\145\34\144\10\132\1\157\31\132\2\113"+
    "\1\132\5\113\1\147\1\160\13\113\1\134\14\113\2\150"+
    "\1\132\5\150\1\151\1\150\1\161\31\150\1\132\5\150"+
    "\1\162\1\150\1\161\27\150\2\31\1\0\1\152\4\31"+
    "\1\163\6\31\1\152\5\31\1\32\1\31\2\152\13\31"+
    "\1\0\1\164\4\31\1\165\1\31\1\35\1\36\1\166"+
    "\1\31\1\167\1\164\1\31\1\167\3\31\1\32\1\167"+
    "\2\164\6\31\1\167\4\31\1\0\1\170\13\31\1\170"+
    "\5\31\1\32\1\31\2\170\11\31\10\132\1\157\1\171"+
    "\30\132\2\172\1\132\5\172\1\173\31\172\2\150\1\132"+
    "\5\150\1\162\1\174\1\161\27\150\2\31\1\0\1\175"+
    "\4\31\1\165\1\31\1\35\1\36\1\166\1\31\1\167"+
    "\1\175\1\31\1\167\3\31\1\32\1\167\2\175\6\31"+
    "\1\167\4\31\1\0\11\31\1\167\1\31\1\167\2\31"+
    "\1\167\3\31\1\32\1\167\10\31\1\167\2\31\2\172"+
    "\1\132\5\172\1\176\31\172\2\31\1\0\1\175\6\31"+
    "\1\35\2\36\2\31\1\175\5\31\1\32\1\31\2\175"+
    "\11\31\2\172\1\132\5\172\1\176\1\177\30\172";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  1, 
     1,  0,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0, 
     0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  0,  1,  0,  0,  1,  1, 
     1,  1,  0,  1,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  1, 
     0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  1,  0,  1,  0,  1, 
     0,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private TablaSimbolos tabla;
	private String in;
	public void Yylex(Reader in, TablaSimbolos t){
		this(in);
		this.tabla = t;
	}

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3230];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 19: 
          {  return symbolFactory.newSymbol("ASSIGN", ASSIGN, yytext());  }
        case 128: break;
        case 62: 
          {  return symbolFactory.newSymbol("HEXNUMBER", HEXNUMBER, Integer.parseInt(yytext().substring(2,yytext().length()), 16));  }
        case 129: break;
        case 12: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 130: break;
        case 21: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 131: break;
        case 6: 
          {  return symbolFactory.newSymbol("DIVIDEDBY", DIVIDEDBY);  }
        case 132: break;
        case 47: 
        case 48: 
          {  return symbolFactory.newSymbol("DOUBLENUMBER", DOUBLENUMBER, Double.parseDouble(yytext()));  }
        case 133: break;
        case 50: 
        case 51: 
        case 69: 
        case 71: 
        case 88: 
        case 98: 
        case 109: 
        case 111: 
        case 120: 
        case 123: 
        case 126: 
          {  return symbolFactory.newSymbol("COMMENT", COMMENT, yytext());  }
        case 134: break;
        case 17: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 135: break;
        case 22: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 136: break;
        case 79: 
          {  return symbolFactory.newSymbol("VARIABLE", VARIABLE, yytext());  }
        case 137: break;
        case 5: 
        case 13: 
        case 16: 
        case 26: 
        case 38: 
        case 44: 
        case 66: 
        case 81: 
        case 94: 
        case 107: 
        case 115: 
        case 124: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 138: break;
        case 75: 
          {  return symbolFactory.newSymbol("EXPONENTIAL", EXPONENTIAL, yytext());  }
        case 139: break;
        case 3: 
        case 4: 
        case 14: 
          {                                }
        case 140: break;
        case 83: 
        case 84: 
        case 95: 
        case 105: 
          {  return symbolFactory.newSymbol("MATRICULA", MATRICULA, yytext());  }
        case 141: break;
        case 78: 
          {  return symbolFactory.newSymbol("LOGARITHM", LOGARITHM, yytext());  }
        case 142: break;
        case 9: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 143: break;
        case 7: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 144: break;
        case 2: 
        case 8: 
        case 10: 
        case 11: 
        case 15: 
        case 18: 
        case 20: 
        case 23: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 145: break;
        case 36: 
        case 61: 
          {  return symbolFactory.newSymbol("NOMBREAPELLIDOS", NOMBREAPELLIDOS, yytext());  }
        case 146: break;
        case 119: 
          {  return symbolFactory.newSymbol("FECHA", FECHA, yytext());  }
        case 147: break;
        case 80: 
        case 97: 
        case 99: 
        case 100: 
        case 121: 
        case 122: 
        case 125: 
          {  return symbolFactory.newSymbol("EMAIL", EMAIL, yytext());  }
        case 148: break;
        case 117: 
        case 118: 
          {  return symbolFactory.newSymbol("DNI", DNI, yytext());  }
        case 149: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
