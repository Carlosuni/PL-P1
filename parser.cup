/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, PERCEN, EXP, LOG, SIN, COS, COMMA, DIV;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal Double    SCIENNUM, REALNUM;        // our scanner provides real numbers as doubles
terminal String    INF;

/* Non terminals */
non terminal            expr_list;
non terminal            percomm;
non terminal Double    real_expr;      // used to store evaluated subexpressions
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
precedence left EXP, LOG, SIN, COS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
			| expr_list percomm:pc          {:   :}
			| expr_list real_expr:re          {: System.out.println(re); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            | expr:e  percomm:pc      {: System.out.println(e); :}
            | real_expr:re SEMI                   {: System.out.println(re); :}
            | real_expr:re  percomm:pc      {: System.out.println(re); :}
            | percomm:pc                   {:  :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             | EXP LPAREN expr:e1 COMMA expr:e2 RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.pow(e1,e2)));       :}
             | LOG LPAREN expr:e RPAREN		{: RESULT = Float.valueOf(Math.log(e));   :}
             | COS LPAREN expr:e RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.cos(e)));   :}
             | SIN LPAREN expr:e RPAREN     {: RESULT = Float.valueOf(String.valueOf(Math.sin(e)));   :}
             | INF PLUS expr:e				{: RESULT = System.out.println("INF");   :}
             | INF MINUS expr:e				{: RESULT = System.out.println("INF");   :}
             | INF TIMES expr:e				{: RESULT = System.out.println("INF");   :}
             | INF DIV expr:e				{: RESULT = System.out.println("INF");   :}
             | expr:e DIV INF				{: RESULT = System.out.println("INF");   :}
             //| expr:e DIV expr:0			{: RESULT = Float.valueOf(0);   :}
             | INF DIV expr:e				{: RESULT = System.out.println("INF");   :}
             //| expr:0 DIV INF				{: RESULT = Float.valueOf(0);   :}
             | INF MINUS INF				{: RESULT = System.out.println("UNK");   :}
             | MINUS INF PLUS INF			{: RESULT = System.out.println("UNK");   :}
             //| expr:0 DIV expr:0			{: RESULT = System.out.println("UNK");   :}
             //| expr:0 TIMES INF				{: RESULT = System.out.println("UNK");   :}
			| INF DIV INF {: RESULT = System.out.println("UNK"); :}
             ;

real_expr ::= real_expr:re1 PLUS  real_expr:re2         {: RESULT = re1+re2;        :}
			 |real_expr:re PLUS  expr:e         {: RESULT = re+e.doubleValue();        :}
			 |expr:e PLUS  real_expr:re         {: RESULT = e.doubleValue()+re;        :}
             | real_expr:re1 MINUS real_expr:re2        {: RESULT = re1-re2;        :}
             | real_expr:re MINUS expr:e        {: RESULT = re-e.doubleValue();        :}
             | expr:e MINUS real_expr:re        {: RESULT = e.doubleValue()-re;        :}
             | real_expr:re1 TIMES real_expr:re2        {: RESULT = re1*re2;        :}
             | real_expr:re TIMES expr:e        {: RESULT = re*e.doubleValue();        :}
             | expr:e TIMES real_expr:re        {: RESULT = e.doubleValue()*re;        :}
             | MINUS real_expr:re                 {: RESULT = -re;           :}
             %prec UMINUS
             | LPAREN real_expr:re RPAREN	         {: RESULT = re;           :}
             | REALNUM:n	                     {: RESULT = n;           :}             
             | SCIENNUM:sn	                     {: RESULT = sn;           :}
             ;
            
percomm ::= PERCEN			 {:      :}	
            ;
       