/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, LOG, EXP, SIN, COS, COMMA;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String		PERCCOMM;
terminal Double		REALNUM, SCIENCNUM;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal Double    double_expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            /* Ej1-a */
            expr_list PERCCOMM         {:  :}
            | PERCCOMM                  {:  :}
            | expr_list double_expr:e SEMI         {: System.out.println(e); :}
            | double_expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
              /* Ej2-a */
             ;

double_expr      ::= double_expr:e1 PLUS  double_expr:e2         {: RESULT = e1+e2;        :}
             | double_expr:e1 MINUS double_expr:e2        {: RESULT = e1-e2;        :}
             | double_expr:e1 MINUS expr:e2        {: RESULT = e1- (new Double(Integer.valueOf(e2)));        :}
             | expr:e1 MINUS double_expr:e2        {: RESULT = e1-e2;        :}
             | double_expr:e1 TIMES double_expr:e2        {: RESULT = e1*e2;        :}
             | double_expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | expr:e1 TIMES double_expr:e2        {: RESULT = e1*e2;        :}             
             | MINUS double_expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN double_expr:e RPAREN	         {: RESULT = e;           :}
              /* Ej2-a */
             | LOG LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.log(e));        :} 
             | LOG LPAREN expr:e RPAREN      {: RESULT = new Double(Math.log(e));        :}       
             | EXP LPAREN double_expr:e1 COMMA expr:e2 RPAREN      {: RESULT = new Double(Math.pow(e1,e2));        :} 
             | EXP LPAREN expr:e1 COMMA expr:e2 RPAREN      {: RESULT = new Double(Math.pow(e1,e2));        :}    
             | SIN LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.sin(e));        :} 
             | SIN LPAREN expr:e RPAREN      {: RESULT = new Double(Math.sin(e));        :}    
             | COS LPAREN double_expr:e RPAREN      {: RESULT = new Double(Math.cos(e));        :} 
             | COS LPAREN expr:e RPAREN      {: RESULT = new Double(Math.cos(e));        :}    
             | REALNUM:n	                     {: RESULT = n;           :}
             | SCIENCNUM:n	                     {: RESULT = n;           :}
             ;     